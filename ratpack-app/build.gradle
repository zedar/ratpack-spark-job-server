//----------------------------------------------------------------------------------------------------------------------
// Gradle script dependencies
//----------------------------------------------------------------------------------------------------------------------

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.8.0'
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
  }
}

//----------------------------------------------------------------------------------------------------------------------
// Gradle plugins from plugin central
//----------------------------------------------------------------------------------------------------------------------

plugins {
  id "io.ratpack.ratpack-groovy" version "1.0.0"
  id "com.github.johnrengelman.shadow" version "1.2.2"
  id "idea"
  id "checkstyle"
}

apply plugin: 'io.github.robwin.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

//----------------------------------------------------------------------------------------------------------------------
// Source compatibility settings
//----------------------------------------------------------------------------------------------------------------------

if (!JavaVersion.current().java8Compatible) {
  throw new IllegalStateException("Must be built at least with Java 1.8")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//----------------------------------------------------------------------------------------------------------------------
// Project repositories
//----------------------------------------------------------------------------------------------------------------------

repositories {
  jcenter()
}

//----------------------------------------------------------------------------------------------------------------------
// Project dependencies
//----------------------------------------------------------------------------------------------------------------------

dependencies {
  // Ratpack Guice
  compile ratpack.dependency("guice")

  // Lombok
  compile "org.projectlombok:lombok:1.16.4"

  // log4j 2
  runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.4.1"
  runtime "org.apache.logging.log4j:log4j-api:2.4.1"
  runtime "org.apache.logging.log4j:log4j-core:2.4.1"
  runtime "com.lmax:disruptor:3.3.2"

  testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

//----------------------------------------------------------------------------------------------------------------------
// Application starting point
//----------------------------------------------------------------------------------------------------------------------

mainClassName = "ratpack.spark.jobserver.Main"

//----------------------------------------------------------------------------------------------------------------------
// Task dependencies
//----------------------------------------------------------------------------------------------------------------------

//apply.dependsOn([":spark-module-deps:installDist", ":spark-module-topn:installDist"])
//apply.mustRunAfter([":spark-module-deps:installDist", ":spark-module-topn:installDist"])

// ---------------------------------------------------------------------------------------------------------------------
// checkstyle
// ---------------------------------------------------------------------------------------------------------------------

def checkstyleConfigDir = new File(buildscript.sourceFile.parentFile, '../config/checkstyle')

checkstyle {
  configFile = new File(checkstyleConfigDir, "checkstyle.xml")
  configProperties.checkstyleConfigDir = checkstyleConfigDir
}

// ---------------------------------------------------------------------------------------------------------------------
// convert swagger API definition to markdown
// ---------------------------------------------------------------------------------------------------------------------

convertSwagger2markup {
  outputDir file("docs/apidef-asciidoc")
}

ext {
  asciiDocOutputDir = file("docs/apidef")
}

asciidoctor {
  dependsOn convertSwagger2markup
  sourceDir file("docs/apidef-asciidoc")
  outputDir file("docs/apidef")
  backends = ['html5']
}

// ---------------------------------------------------------------------------------------------------------------------
// ssh deployment configuration
// ---------------------------------------------------------------------------------------------------------------------

task installHost(dependsOn: "installDist") << {
  ssh.run {
    session(remotes.jobServer) {
      def result = execute "uptime"
      println "HOST UPTIME: ${result}"

      println "HOST: remove /home/${jobServerUser}/run/${project.name}"
      execute "rm -rf /home/${jobServerUser}/run/${project.name}"

      println "HOST: create clean /home/${jobServerUser}/run/${project.name}"
      execute "mkdir -p /home/${jobServerUser}/run/${project.name}"

      println "HOST: copy distribution..."
      put from: "${buildDir}/install/${project.name}", into: "/home/${jobServerUser}/run"

      println "HOST: make startup script executable"
      execute "chmod u+x /home/${jobServerUser}/run/${project.name}/bin/${project.name}"
    }
  }
}

task runHost(dependsOn: "installHost") << {
  ssh.run {
    session(remotes.jobServer) {
      println "Stopping... "
      execute "ps ax | grep -e '-classpath /home/${jobServerUser}/run/${project.name}' | grep -v grep | awk '{ print \$1 } ' | xargs kill -9", ignoreError: true

      println "Starting..."
      execute "nohup /home/${jobServerUser}/run/${project.name}/bin/${project.name} > /home/${jobServerUser}/run/${project.name}.log 2>&1&"
    }
  }
}