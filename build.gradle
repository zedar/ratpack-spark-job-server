//----------------------------------------------------------------------------------------------------------------------
// Gradle plugins from plugin central
//----------------------------------------------------------------------------------------------------------------------
plugins {
  id "idea"
  id "checkstyle"
  id "org.hidetake.ssh" version "1.1.4"
}

idea {
  project {
    languageLevel "1.8"
  }
}

//----------------------------------------------------------------------------------------------------------------------
// Run application - prepare all dependencies
//----------------------------------------------------------------------------------------------------------------------

task run(dependsOn: [
  ":spark-job-interface:install",
  ":spark-module-deps:installDist",
  ":spark-module-topn:installDist",
  ":spark-module-movie-recommendation:installDist",
  ":ratpack-app:run"])
run.mustRunAfter([
  ":spark-job-interface:install",
  ":spark-module-deps:installDist",
  ":spark-module-topn:installDist",
  ":spark-module-movie-recommendation:installDist"])

// ---------------------------------------------------------------------------------------------------------------------
// checkstyle
// ---------------------------------------------------------------------------------------------------------------------

def checkstyleConfigDir = new File(buildscript.sourceFile.parentFile, 'config/checkstyle')

checkstyle {
  configFile = new File(checkstyleConfigDir, "checkstyle.xml")
  configProperties.checkstyleConfigDir = checkstyleConfigDir
}

//----------------------------------------------------------------------------------------------------------------------
// Gradle Wrapper - use $ ./gradlew wrapper in order to force gradle version
//----------------------------------------------------------------------------------------------------------------------

task wrapper(type: Wrapper) {
  gradleVersion = "2.7"
}

// ---------------------------------------------------------------------------------------------------------------------
// ssh deployment configuration
// ---------------------------------------------------------------------------------------------------------------------

subprojects {
  ssh.settings {
    dryRun = project.hasProperty('dryRun')
  }

  remotes {
    jobServer {
      host = jobServerHost
      user = jobServerUser
      password = jobServerPassword
    }
  }
}


//task host_deploy(dependsOn: "host_install") << {
//    ssh.run {
//        session(remotes.dev) {
//            println "Stopping..."
//            execute "pkill -9 -f 'java -classpath /home/${devHostUser}'"
//
//            println "Starting..."
//            execute "nohup dev/${project.name}/bin/${project.name} > dev/${project.name}.log 2>&1&"
//        }
//    }
//}